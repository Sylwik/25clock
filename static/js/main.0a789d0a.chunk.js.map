{"version":3,"sources":["components/Break.js","components/Session.js","components/Time.js","App.js","reportWebVitals.js","index.js"],"names":["Break","text","onLenghten","onShorten","id","className","onClick","Session","Time","minutes","seconds","onReset","onToggle","preload","src","App","min","sec","useState","breakValue","setBreakValue","sessionValue","setSessionValue","setMinutes","setSeconds","isStart","setStart","undefined","intervalId","setIntervalId","timeText","setTimeText","sessionMode","setSessionMode","audio","document","getElementById","runTime","play","x","clearInterval","pause","currentTime","style","display","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0a789d0a.chunk.js","sourcesContent":["import {FaArrowCircleDown, FaArrowCircleUp} from 'react-icons/fa'\n\nconst Break = ({text, onLenghten, onShorten}) => {\n    return (\n        <div id=\"break\" className=\"setting\">\n            <h1 id=\"break-label\">Break Length</h1>\n            <div className=\"scale\">\n                <FaArrowCircleDown id=\"break-decrement\" onClick={onShorten}/>\n                <p id=\"break-length\">{text}</p>\n                <FaArrowCircleUp id=\"break-increment\" onClick={onLenghten}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Break\n","import {FaArrowCircleDown, FaArrowCircleUp} from 'react-icons/fa'\n\nconst Session = ({text, onLenghten, onShorten}) => {\n    return (\n        <div id=\"session\" className=\"setting\">\n            <h1 id=\"session-label\">Session Length</h1>\n            <div className=\"scale\">\n                <FaArrowCircleDown id=\"session-decrement\" onClick={onShorten}/>\n                <p id=\"session-length\">{text}</p>\n                <FaArrowCircleUp id=\"session-increment\" onClick={onLenghten}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Session\n","import {IoStopwatchOutline, IoStopwatchSharp} from 'react-icons/io5'\nimport {BiReset} from 'react-icons/bi'\n\nconst Time = ({text, minutes, seconds, onReset, onToggle}) => {\n    return (\n        <div id='time'>\n            <h1 id='time-label'>{text}</h1>\n            <div id=\"time-left\">{minutes} : {seconds}</div>\n            <div id=\"fa-container\">\n                <button id=\"start_stop\" onClick={onToggle}>\n                    <IoStopwatchOutline id=\"start-icon\" className=\"start-stop-icon\"/>\n                    <IoStopwatchSharp id=\"stop-icon\" className=\"start-stop-icon\"/>\n                </button>\n                <button id=\"reset\" onClick={onReset}>\n                <BiReset/>\n            </button>\n            <audio id=\"beep\" preload=\"auto\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></audio>\n            </div>\n        </div>\n    )\n}\n\nexport default Time\n","import Break from './components/Break'\nimport Session from './components/Session'\nimport Time from './components/Time'\nimport {useState} from 'react'\n\nfunction App() {\n  const [breakValue, setBreakValue] = useState(5);\n  const [sessionValue, setSessionValue] = useState(25);\n  const[minutes, setMinutes] = useState(sessionValue);\n  const [seconds, setSeconds] = useState(\"00\");\n  const [isStart, setStart] = useState(true); \n  const [intervalId, setIntervalId] = useState(undefined);\n  const [timeText, setTimeText] = useState(\"Session\");\n  const [sessionMode, setSessionMode] = useState(true);\n  let min;\n  let sec; \n  var audio = document.getElementById(\"beep\");\n  \n\n  const longerBreak = () => {\n    let x = breakValue + 1;\n    if(x > 0 && x <61){\n      setBreakValue(x);\n    }\n  }\n  const shorterBreak = () => {\n    let x = breakValue - 1;\n    if(x > 0 && x <61){\n      setBreakValue(x);\n    }\n  }\n  const longerSession = () => {\n    let x = sessionValue + 1;\n    if(x > 0 && x <61){\n      setSessionValue(x);\n      setSeconds(\"00\");\n      if(x < 10){\n        setMinutes(\"0\" + x);\n      }else{\n        setMinutes(x);\n      }\n    }\n  }\n  const shorterSession = () => {\n    let x = sessionValue - 1;\n    if(x > 0 && x <61){\n      setSessionValue(x);\n      setSeconds(\"00\");\n      if(x < 10){\n        setMinutes(\"0\" + x);\n      }else{\n        setMinutes(x);\n      }\n    }\n  }\n\n  const reset = () => {\n    clearInterval(intervalId);\n    setBreakValue(5);\n    setSessionValue(25);\n    setMinutes(25);\n    setSeconds(\"00\");\n    audio.pause();\n    audio.currentTime = 0;\n    document.getElementById(\"stop-icon\").style.display = \"none\";\n    document.getElementById(\"start-icon\").style.display = \"block\";\n    setStart(true);\n  }\n\n\n  const runTime = () => {\n    sec--;\n        if(sec < 10 && sec > 0) {\n          setSeconds(\"0\" + sec);\n        }else if(min === 0 && sec === 0){\n          setSeconds(\"00\");\n          setMinutes(\"00\");\n          sec = 60;\n          audio.play();\n          if( sessionMode === true){\n            min = breakValue;\n            setTimeText(\"Break\");\n            setSessionMode(false);\n          }else{\n            min = sessionValue;\n            setTimeText(\"Session\");\n            setSessionMode(true);\n          }\n        }else if( sec === 0){\n          setSeconds(\"00\");\n          sec = 60;\n        }else if(sec === 59){\n          setSeconds(sec);\n          min--;\n          if(min < 10){\n            setMinutes(\"0\" + min);\n          }else{\n            setMinutes(min);\n          }\n        }else{\n          setSeconds(sec);\n        }\n  }\n\n  const toggleTimer = () => {\n    if (isStart === true){\n      min = minutes;\n    if(seconds === \"00\"){\n      sec = 60;\n    }else{\n      sec = seconds + 1;\n    }\n      document.getElementById(\"stop-icon\").style.display = \"block\";\n      document.getElementById(\"start-icon\").style.display = \"none\";\n      setIntervalId(setInterval(runTime, 1000));\n    }else{\n      clearInterval(intervalId);\n      document.getElementById(\"stop-icon\").style.display = \"none\";\n      document.getElementById(\"start-icon\").style.display = \"block\";\n    }\n    setStart(!isStart);\n}\n\n  return (\n    <div className=\"App\">\n      <div id=\"first-row\">\n        <Break text={breakValue} onLenghten={longerBreak} onShorten={shorterBreak}/>\n        <Session text={sessionValue} onLenghten={longerSession} onShorten={shorterSession}/>\n      </div>\n      <Time text={timeText} minutes={minutes} seconds={seconds} onReset={reset} onToggle={toggleTimer}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}